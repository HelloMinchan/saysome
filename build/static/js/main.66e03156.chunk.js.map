{"version":3,"sources":["authentications/AuthRoute.tsx","authentications/AuthRequest.ts","pages/LoginPage.tsx","globalData.ts","authentications/LogoutButton.tsx","pages/MainPage.tsx","pages/Errorpage.tsx","pages/signup_pages/SignupUserInfoPage.tsx","pages/signup_pages/SignupEmailCheckPage.tsx","pages/signup_pages/SignupReviewPage.tsx","pages/signup_pages/SignupControlPage.tsx","App.tsx","serviceWorker.ts","apolloClient.ts","index.tsx"],"names":["AuthRoute","authenticated","render","props","to","pathname","state","from","location","dotenv","config","loginAxios","email","password","a","form","FormData","append","axios","post","process","loginRequest","data","Alert","elevation","variant","Contatiner","styled","div","TitleLogo","LoginLoigcContainer","StyledvFormControlLabel","FormControlLabel","StyledButton","Button","LoginBottomContainer","LoginPage","login","useState","setEmail","setPassword","error","setError","warning","setWarning","warningCode","setWarningCode","loginClick","userData","CheckValue","handleClose","event","reason","Copyright","Typography","color","align","Date","getFullYear","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","defaultValue","onChange","value","target","type","control","Checkbox","onClick","style","background","marginBottom","Grid","container","item","xs","Link","href","Snackbar","open","autoHideDuration","onClose","severity","withRouter","logout","history","push","MainPage","user","food","ErrorPage","Separation","EmailDuplicateCheck","createEmailDuplicateCheck","css","SignupUserInfoPage","createName","createEmail","createEmailDuplicateCheckSentence","createPassword1","createPassword2","createFavoriteFood","setCreateName","setCreateEmail","setCreatePassword1","setCreatePassword2","setCreateFavoriteFood","emailDuplicateCheckRequest","Fragment","gutterBottom","paddingLeft","paddingTop","CountDown","SignupEmailCheckPage","authEmailCode","setAuthEmailCode","minute","setMinute","second","setSecond","fakeSecond","setFakeSecond","useEffect","decreaseSecond","setInterval","clearInterval","fontWeight","spacing","sm","useStyles","makeStyles","theme","title","marginTop","Provision","SignupReviewPage","provisionAcceptCheck","setProvisionAcceptCheck","emailReceptionAcceptCheck","setEmailReceptionAcceptCheck","classes","signupInfo","category","description","className","join","direction","map","information","key","wordBreak","emailDuplicateCheckAxios","signupApplyAxios","provisionAccept","emailReceptionAccept","toString","appBar","position","layout","width","marginLeft","marginRight","breakpoints","up","paper","padding","stepper","buttons","display","justifyContent","button","SignupFinishLoginButtonPosition","SignupControlPage","activeStep","setActiveStep","setCreateEmailDuplicateCheck","setCreateEmailDuplicateCheckSentence","errorMessage","setErrorMessage","indexOf","signupApplyRequest","steps","handleStepNext","useHistory","goLoginPageClick","unblock","block","CssBaseline","AppBar","Paper","Stepper","Step","StepLabel","length","step","Error","getStepContent","App","setUser","path","RouteProps","exact","component","Boolean","window","hostname","match","client","ApolloClient","uri","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.66e03156.chunk.js","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n// 로그아웃 버튼 컴포턴트 타입\ninterface AuthRouteProps {\n  authenticated: boolean;\n  render: Function;\n  exact?: boolean;\n  path?: string;\n}\n\n/***************************************************************************************\n                              인증 라우트 컴포넌트\n                              Arguments : AuthRouteProps\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.04.28\n***************************************************************************************/\nconst AuthRoute: React.FC<AuthRouteProps> = ({ authenticated, render }) => {\n  return (\n    <Route\n      render={(props) =>\n        // 로그인 상태인가?\n        authenticated ? (\n          // 렌더 컴포넌트가 있는가?\n          render ? (\n            // 로그인 상태일 시 선택한 화면으로 라우트\n            render(props)\n          ) : (\n            // 로그인 상태지만 렌더 컴포넌트가 없을 시 빈 화면 그리기\n            <></>\n          )\n        ) : (\n          // 비로그인 상태일 시 로그인 화면으로 Redirect\n          <Redirect\n            to={{ pathname: \"/login\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default AuthRoute;\n","import axios, { AxiosResponse } from \"axios\";\n\n// import dotenv\nimport dotenv from \"dotenv\";\n\n// import .env\ndotenv.config();\n\n// 유저 정보 타입\nexport interface UserInfo {\n  email: string;\n  password: string;\n  name: string;\n  food: string;\n  provisionAccept: Boolean;\n  emailReceptionAccept: Boolean;\n}\n\n/*\n  로그인 API 호출 함수\n  method: POST\n  Error Code : 1\n  Arguments : email, password\n  Return : Promise<AxiosResponse<UserInfo | string> | string>\n*/\nconst loginAxios = async (\n  email: string,\n  password: string\n): Promise<AxiosResponse<UserInfo | string> | string> => {\n  // form 생성\n  const form = new FormData();\n  // form에 데이터 추가\n  form.append(\"email\", email);\n  form.append(\"password\", password);\n\n  try {\n    // 로그인 API 호출\n    return await axios.post(\n      `${process.env.REACT_APP_saysome_restful_server}/login`,\n      form\n    );\n  } catch (error) {\n    // 로그인 응답 실패 시 \"API Error\" 문자열 반환\n    const apiError = \"API Error\";\n    return apiError;\n  }\n};\n\n/*\n  로그인 함수\n  Arguments : email, password\n  Return : Promise<AxiosResponse<UserInfo | string> | string>\n*/\nexport const loginRequest: Function = async (\n  email: string,\n  password: string\n): Promise<AxiosResponse<UserInfo | string> | string> => {\n  const data = await loginAxios(email, password);\n  return data;\n};\n","import React, { useState } from \"react\";\nimport { RouteComponentProps, Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport {\n  Typography,\n  TextField,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  Grid,\n  Link,\n  Snackbar,\n} from \"@material-ui/core\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\n\n// import authentications\nimport { loginRequest } from \"../authentications/AuthRequest\";\n\n// import globalData\nimport { logoColor, loginButtonColor } from \"../globalData\";\n\n/*\n  로그인 실패 경고창 생성 함수\n  Arguments : void\n  Return : JSX.Element\n*/\nconst Alert: Function = (props: AlertProps): JSX.Element => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\n// LoginPage 컴포넌트 타입 ( Route의 match, history, location 타입 상속 )\ninterface LoginPageProps extends RouteComponentProps<any> {\n  authenticated: boolean;\n  login: Function;\n}\n\n/***************************************************************************************\n                              LoginPage 컴포넌트\n                              Arguments : LoginPageProps\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.05.22\n***************************************************************************************/\nconst LoginPage: React.FC<LoginPageProps> = ({\n  authenticated,\n  login,\n  location,\n}) => {\n  // 유저 로그인 이메일 hooks ( 변수 : email, 함수 : setEmail )\n  const [email, setEmail]: [string, Function] = useState<string>(\"\");\n  // 유저 로그인 비밀번호 hooks ( 변수 : password, 함수 : setPassword )\n  const [password, setPassword]: [string, Function] = useState<string>(\"\");\n\n  // 로그인 실패 경고창 생성 hooks ( 변수 : error, 함수 : setError )\n  const [error, setError]: [boolean, Function] = useState<boolean>(false);\n  // 로그인 응답 실패 경고창 생성 hooks ( 변수 : warning, 함수 : setWarning )\n  const [warning, setWarning]: [boolean, Function] = useState<boolean>(false);\n  // 로그인 응답 실패 에러코드 hooks ( 변수 : warningCode, 함수 : setWarningCode )\n  const [warningCode, setWarningCode]: [string, Function] = useState<string>(\n    \"\"\n  );\n\n  /*\n    로그인 버튼 클릭 함수\n    Arguments : void\n    Return : Promise<void>\n    ( AuthRequest 파일 loginRequest 함수 사용 )\n  */\n  const loginClick: any = async (): Promise<void> => {\n    // 이메일 혹은 비밀번호 입력 안했을 시 로그인 실패 처리\n    if (email === \"\" || password === \"\") {\n      // 로그인 실패 시 경고창 생성\n      setError(true);\n    } else {\n      const userData = await loginRequest(email, password);\n      // 로그인 응답 실패 시 API 서버에서 Error 객체 반환 후 loginRquest에서 \"API Error\" 문자열 반환됨\n      if (userData === \"API Error\") {\n        // App.tsx의 login Hook 함수에 null 반환\n        login(null);\n        // 로그인 응답 실패 시 경고창 생성\n        // 에러코드 : 1\n        setWarningCode(\"1\");\n        setWarning(true);\n      } else if (userData.data.CheckValue === \"Database Error\") {\n        // 데이터베이스 응답 실패 시 경고창 생성\n        // 에러코드 : 2\n        setWarningCode(\"2\");\n        setWarning(true);\n      }\n      // 로그인 실패 시 API 서버에서 \"Error\" 문자열 반환됨\n      else if (userData.data === \"Error\") {\n        // App.tsx의 login Hook 함수에 null 반환\n        login(null);\n        // 로그인 실패 시 경고창 생성\n        setError(true);\n      } else {\n        // App.tsx의 login Hook 함수에 userData.data 객체 반환\n        login(userData.data);\n      }\n    }\n  };\n\n  /*\n    경고창 끄기 버튼 클릭 함수\n    Arguments : void\n    Return : void\n    ( AuthRequest 파일 loginRequest 함수 사용 )\n    ( 자동 사라짐 기능 의존 함수 )\n  */\n  const handleClose: any = (\n    event?: React.SyntheticEvent,\n    reason?: string\n  ): void => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setError(false);\n    setWarning(false);\n  };\n\n  /*\n    카피라이트 함수\n    Arguments : void\n    Return : JSX.Element\n  */\n  const Copyright: Function = (): JSX.Element => {\n    return (\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {\"Copyright © HelloMinchan \"}\n        {new Date().getFullYear()}\n        {\".\"}\n      </Typography>\n    );\n  };\n\n  // location.state로 현재위치를 얻거나 아니면 루트 path\n  const from: any = location.state || { from: { pathname: \"/\" } };\n\n  // 변경 전 : const { from } = location.state || { from: { pathname: \"/\" } };\n  // 만약 로그인 상태일 시 from으로 Redirect\n  if (authenticated) return <Redirect to={from} />;\n\n  return (\n    <Contatiner>\n      <TitleLogo>{\"Say Some\"}</TitleLogo>\n\n      <LoginLoigcContainer>\n        {/* 아이디 입력란 */}\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"email\"\n          label=\"이메일\"\n          name=\"email\"\n          autoComplete=\"email\"\n          autoFocus\n          defaultValue={email}\n          onChange={({ target: { value } }) => setEmail(value)}\n        />\n\n        {/* 비밀번호 입력란 */}\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          name=\"password\"\n          label=\"비밀번호\"\n          type=\"password\"\n          id=\"password\"\n          autoComplete=\"current-password\"\n          defaultValue={password}\n          onChange={({ target: { value } }) => setPassword(value)}\n        />\n\n        {/* 로그인 상태 유지 체크 버튼 */}\n        <StyledvFormControlLabel\n          control={<Checkbox value=\"remember\" />}\n          label=\"로그인 상태 유지\"\n        />\n\n        {/* 로그인 버튼 */}\n        <StyledButton\n          onClick={loginClick}\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          style={{ background: loginButtonColor, marginBottom: \"1%\" }}\n        >\n          {\"로그인\"}\n        </StyledButton>\n\n        <Grid container>\n          {/* 비밀번호 조회 링크 */}\n          <Grid item xs>\n            <Link href=\"#\" variant=\"body2\">\n              {\"비밀번호 잊어버리셨나요?\"}\n            </Link>\n          </Grid>\n          {/* 회원가입 링크 */}\n          <Grid item>\n            <Link href=\"#/signup\" variant=\"body2\">\n              {\"아직 회원이 아니신가요? 가입하기\"}\n            </Link>\n          </Grid>\n        </Grid>\n      </LoginLoigcContainer>\n\n      <LoginBottomContainer>\n        {/* 하단 카피라이트 */}\n        <Copyright />\n      </LoginBottomContainer>\n\n      {/* 로그인 실패 경고창 */}\n      <Snackbar open={error} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {\"이메일 혹은 비빌먼호를 확인하세요!\"}\n        </Alert>\n      </Snackbar>\n      {/* 로그인 응답 실패 경고창 */}\n      {/* autoHideDuration Props에 null 설정 시 자동 사라짐 비활성화되므로 주의 */}\n      <Snackbar open={warning} autoHideDuration={10000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"warning\">\n          {`에러코드 : ${warningCode}, 고객센터에 문의해 주세요!`}\n        </Alert>\n      </Snackbar>\n    </Contatiner>\n  );\n};\n\n/* styled-components */\n// 컨테이너 컴포넌트\nconst Contatiner = styled.div`\n  /* background-color: #808080; */\n  height: 100%;\n  width: 50%;\n  padding-left: 25%;\n  padding-right: 25%;\n  display: flex;\n  flex-direction: column;\n`;\n\n// 로고 컴포넌트\nconst TitleLogo = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20%;\n  width: 100%;\n  padding-top: 17%;\n  font-family: \"Baloo Tammudu 2\", cursive;\n  font-size: 10vmax;\n  color: ${logoColor};\n`;\n\n// 로그인 로직 부분 높이 지정 컴포넌트\nconst LoginLoigcContainer = styled.div`\n  height: 50%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\n// 로그인 상태 유지 체크 박스 컴포넌트\nconst StyledvFormControlLabel = styled(FormControlLabel)`\n  width: 100%;\n  padding-top: 1%;\n  padding-bottom: 1%;\n`;\n\n// 로그인 버튼 컴포넌트\nconst StyledButton = styled(Button)`\n  height: 45px;\n`;\n\n// 로그인 하단 부 높이 지정 컴포넌트\nconst LoginBottomContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 15%;\n  width: 100%;\n`;\n\nexport default LoginPage;\n","/* 전역 데이터 관리 파일 */\n\n// 로고 색깔 변수\nexport const logoColor: string = \"#ff7f00\";\n\n// 로그인 버튼 색깔 변수\nexport const loginButtonColor: string = \"#ff9f31\";\n","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\n\n// 로그아웃 버튼 컴포턴트 타입 ( Route의 match, history, location 타입 상속 )\ninterface LogoutButtonProps extends RouteComponentProps<any> {\n  logout: Function;\n}\n\n/***************************************************************************************\n                              로그아웃 버튼 컴포넌트\n                              Arguments : LogoutButtonProps\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.05.23\n***************************************************************************************/\nconst LogoutButton: React.FC<LogoutButtonProps> = ({\n  logout,\n  history,\n}): JSX.Element => {\n  const handleClick: any = (): void => {\n    logout();\n    history.push(\"/\");\n  };\n\n  return (\n    <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n      로그아웃\n    </Button>\n  );\n};\n\nexport default withRouter(LogoutButton);\n","import React from \"react\";\n\n// import authentications\nimport LogoutButton from \"../authentications/LogoutButton\";\nimport { UserInfo } from \"../authentications/AuthRequest\";\n\ninterface MainPageProps {\n  user: UserInfo | null;\n  logout: Function;\n}\n\nfunction MainPage({ user, logout }: MainPageProps) {\n  const { name, food } = user || {};\n  return (\n    <>\n      <h1>\n        안녕 내이름은 {name}이고 {food}를 제일 좋아해 히힛!\n      </h1>\n\n      <LogoutButton logout={logout} />\n    </>\n  );\n}\n\nexport default MainPage;\n","import React from \"react\";\n\n/***************************************************************************************\n                              ErrorPage 컴포넌트\n                              Arguments : void\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.04.28\n***************************************************************************************/\nconst ErrorPage: React.FC = (): JSX.Element => {\n  return <h1>\"Notfound\"</h1>;\n};\n\nexport default ErrorPage;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport styled, { css, StyledComponent } from \"styled-components\";\n\n/***************************************************************************************\n                              SignupUserInfoPage 컴포넌트\n                              Arguments : createName,\n                                          createEmail,\n                                          createEmailDuplicateCheck,\n                                          createEmailDuplicateCheckSentence,\n                                          createPassword1,\n                                          createPassword2,\n                                          createFavoriteFood,\n                                          setCreateName,\n                                          setCreateEmail,\n                                          setCreatePassword1,\n                                          setCreatePassword2,\n                                          setCreateFavoriteFood,\n                                          emailDuplicateCheckRequest,\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.05.22\n***************************************************************************************/\nconst SignupUserInfoPage: React.FC<any> = ({\n  createName,\n  createEmail,\n  createEmailDuplicateCheck,\n  createEmailDuplicateCheckSentence,\n  createPassword1,\n  createPassword2,\n  createFavoriteFood,\n  setCreateName,\n  setCreateEmail,\n  setCreatePassword1,\n  setCreatePassword2,\n  setCreateFavoriteFood,\n  emailDuplicateCheckRequest,\n}) => {\n  return (\n    <React.Fragment>\n      {/* 이름 기입란 */}\n      <Typography variant=\"h6\" gutterBottom style={{ marginBottom: \"-3px\" }}>\n        당신의 이름은 무엇인가요?\n      </Typography>\n      <Grid item xs={6}>\n        <TextField\n          required\n          id=\"Name\"\n          name=\"Name\"\n          label=\"이름 : 예) 홍길동\"\n          fullWidth\n          defaultValue={createName}\n          onChange={({ target: { value } }) => setCreateName(value)}\n        />\n      </Grid>\n\n      <Separation />\n\n      {/* 이메일 기입란 */}\n      <Typography variant=\"h6\" gutterBottom style={{ marginBottom: \"-3px\" }}>\n        이메일을 입력해 주세요.\n      </Typography>\n      <Grid item xs={10}>\n        <TextField\n          required\n          id=\"Email\"\n          name=\"Email\"\n          label=\"이메일 : 예) egeolwhyhaeseokham@saysome.com\"\n          fullWidth\n          autoComplete=\"billing address-line1\"\n          defaultValue={createEmail}\n          onChange={({ target: { value } }) => setCreateEmail(value)}\n        />\n      </Grid>\n\n      <Separation />\n\n      <EmailDuplicateCheck\n        createEmailDuplicateCheck={createEmailDuplicateCheck}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={emailDuplicateCheckRequest}\n        >\n          {\"이메일 중복체크\"}\n        </Button>\n        <Typography\n          variant=\"body1\"\n          gutterBottom\n          style={{ paddingLeft: \"15px\", paddingTop: \"7px\" }}\n        >\n          {createEmailDuplicateCheckSentence}\n        </Typography>\n      </EmailDuplicateCheck>\n\n      <Separation />\n\n      {/* 비밀번호 기입란 */}\n      <Typography variant=\"h6\" gutterBottom style={{ marginBottom: \"-3px\" }}>\n        비밀번호를 입력해 주세요.\n      </Typography>\n      <Grid item xs={6}>\n        <TextField\n          required\n          id=\"Password1\"\n          name=\"Password1\"\n          type=\"password\"\n          label=\"비밀번호 : 예) 1q2w3e4r!\"\n          fullWidth\n          autoComplete=\"current-password\"\n          defaultValue={createPassword1}\n          onChange={({ target: { value } }) => setCreatePassword1(value)}\n        />\n      </Grid>\n\n      <Separation />\n\n      {/* 비밀번호 확인 기입란 */}\n      <Typography variant=\"h6\" gutterBottom style={{ marginBottom: \"-3px\" }}>\n        비밀번호를 다시 한번 입력해 주세요.\n      </Typography>\n      <Grid item xs={6}>\n        <TextField\n          required\n          id=\"Password2\"\n          name=\"Password2\"\n          type=\"password\"\n          label=\"비밀번호 확인 : 예) 1q2w3e4r!\"\n          fullWidth\n          autoComplete=\"current-password\"\n          defaultValue={createPassword2}\n          onChange={({ target: { value } }) => setCreatePassword2(value)}\n        />\n      </Grid>\n\n      <Separation />\n\n      {/* 제일 좋아하는 음식 기입란 */}\n      <Typography variant=\"h6\" gutterBottom style={{ marginBottom: \"-3px\" }}>\n        제일 좋아하는 음식은 무엇인가요?\n      </Typography>\n      <Grid item xs={6}>\n        <TextField\n          required\n          id=\"Food\"\n          name=\"Food\"\n          label=\"음식 이름 : 예) 고등어순살조림\"\n          fullWidth\n          defaultValue={createFavoriteFood}\n          onChange={({ target: { value } }) => setCreateFavoriteFood(value)}\n        />\n      </Grid>\n    </React.Fragment>\n  );\n};\n\n/* styled-components */\n// 회원정보 입력칸 사이 공백 컴포넌트\nconst Separation = styled.div`\n  margin-top: 20px;\n  padding-bottom: 20px;\n`;\n\n// 이메일 중복 체크 칸 컴포넌트\n/*\n  styled-components에 props 사용 시 type 지정을 해줘야 함\n  StyledComponent type import 한 후 제네릭 4번째 인자에 props type 지정\n*/\nconst EmailDuplicateCheck: StyledComponent<\"div\", any, {}, any> = styled.div`\n  display: flex;\n  ${(props: any) => {\n    if (props.createEmailDuplicateCheck) {\n      return css`\n        color: green;\n      `;\n    } else {\n      return css`\n        color: red;\n      `;\n    }\n  }}\n`;\n\nexport default SignupUserInfoPage;\n","import React, { useState, useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport styled from \"styled-components\";\n\n/***************************************************************************************\n                              SignupEmailCheckPage 컴포넌트\n                              Arguments : createEmail,\n                                          authEmailCode,\n                                          setAuthEmailCode\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.05.22\n***************************************************************************************/\nconst SignupEmailCheckPage: React.FC<any> = ({\n  createEmail,\n  authEmailCode,\n  setAuthEmailCode,\n}) => {\n  // 인증 대기시간(분) hooks ( 변수 : minute, 함수 : setAcsetMinutetiveStep )\n  const [minute, setMinute]: [number, Function] = useState<number>(2);\n  // 인증 대기시간(초) hooks ( 변수 : second, 함수 : setSecond )\n  const [second, setSecond]: [number, Function] = useState<number>(59);\n  // 인증 대기시간(초의 십의자리 0 표현) hooks ( 변수 : fakeSecond, 함수 : setFakeSecond )\n  const [fakeSecond, setFakeSecond]: [string, Function] = useState<string>(\"\");\n\n  /***************/\n  /* 생명주기 관리 */\n  /***************/\n  useEffect(() => {\n    // 0초가 됬을 때 1분 감소 및 59초로 초기화\n    if (second === 0) {\n      setMinute(minute - 1);\n      setSecond(59);\n    }\n\n    // 10 초 미만일 시 십의자리 0 표현\n    if (second < 10) {\n      setFakeSecond(\"0\");\n    } else {\n      setFakeSecond(\"\");\n    }\n\n    /*\n      1초씩 감소시키는 함수\n      Arguments : void\n      Return : void\n      ( 함수화하지 않을 시 맨 처음 초기화 값부터 업테이트 값까지 반복 감소함 )\n    */\n    const decreaseSecond = setInterval((): void => {\n      setSecond((second: number) => second - 1);\n    }, 1000);\n    return () => {\n      clearInterval(decreaseSecond);\n    };\n  }, [minute, second, fakeSecond]);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" gutterBottom style={{ fontWeight: \"bold\" }}>\n        인증 메일이 발송되었습니다\n      </Typography>\n      {/* 비밀번호 기입란 */}\n      <Typography variant=\"h6\" gutterBottom style={{ marginBottom: \"-3px\" }}>\n        메일함에서({createEmail}) 인증 메일을 확인하시어 인증 코드를 기입해\n        주세요.\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom style={{ marginBottom: \"25px\" }}>\n        이메일 인증 불가 시 회원가입을 진행하실 수 없습니다.\n      </Typography>\n\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            id=\"AuthEmailCode\"\n            name=\"AuthEmailCode\"\n            fullWidth\n            autoFocus\n            defaultValue={authEmailCode}\n            onChange={({ target: { value } }) => setAuthEmailCode(value)}\n            // defaultValue={}\n            // onChange={({ target: { value } }) => (value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <CountDown>\n            0{minute}:{fakeSecond}\n            {second}\n          </CountDown>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\n/* styled-components */\n// 인증 대기시간 표시 컴포넌트\nconst CountDown = styled.div`\n  margin-top: 8.7px;\n  color: red;\n  font-weight: bold;\n`;\n\nexport default SignupEmailCheckPage;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport styled from \"styled-components\";\n\n/* Material-UI useStyle */\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(2),\n    fontWeight: \"bold\",\n  },\n}));\n\n/***************************************************************************************\n                              SignupReviewPage 컴포넌트\n                              Arguments : createName,\n                                          createEmail,\n                                          createPassword1,\n                                          createFavoriteFood,\n                                          provisionAcceptCheck,\n                                          setProvisionAcceptCheck,\n                                          emailReceptionAcceptCheck,\n                                          setEmailReceptionAcceptCheck\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.05.21\n***************************************************************************************/\nconst SignupReviewPage: React.FC<any> = ({\n  createName,\n  createEmail,\n  createPassword1,\n  createFavoriteFood,\n  provisionAcceptCheck,\n  setProvisionAcceptCheck,\n  emailReceptionAcceptCheck,\n  setEmailReceptionAcceptCheck,\n}) => {\n  // useStyle Call\n  const classes: any = useStyles();\n\n  // 개발자 정보\n  const developerInfo: Array<string> = [\n    \"wjdalscksdle@gmail.com\",\n    \"https://hellominchan.tistory.com\",\n    \"HelloMinchn\",\n    \"24\",\n    \"Korea\",\n  ];\n\n  // 가입자 정보\n  const signupInfo: Array<any> = [\n    { category: \"이름\", description: createName },\n    { category: \"이메일\", description: createEmail },\n    { category: \"비밀번호\", description: createPassword1 },\n    { category: \"좋아하는 음식\", description: createFavoriteFood },\n  ];\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" gutterBottom className={classes.title}>\n        SaySome 이용약관\n      </Typography>\n\n      <Provision>\n        (주) SaySome은 HelloMinchan이 만들었으며, 어쩌고저쩌고이다. 법적 효력을\n        가진척해 보고 싶어서 작성하는 중입니다람쥐. 물론 MIT License이므로, 절대\n        무단 수정 및 배포 모두 상관없지롱 ~_~ 다만, GitHub에 스타 정돈 눌러줄 수\n        있잖아? 아님 인스타 팔로우라도 해주던가...\n      </Provision>\n\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <Typography variant=\"h5\" gutterBottom className={classes.title}>\n            개발자 정보\n          </Typography>\n          <Typography gutterBottom>정민찬</Typography>\n          <Typography gutterBottom>{developerInfo.join(\", \")}</Typography>\n        </Grid>\n\n        <Grid item container direction=\"column\" xs={12} sm={6}>\n          <Typography variant=\"h5\" gutterBottom className={classes.title}>\n            가입자 정보\n          </Typography>\n\n          <Grid container>\n            {signupInfo.map((information) => (\n              <React.Fragment key={information.category}>\n                <Grid item xs={6}>\n                  <Typography gutterBottom>{information.category}</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography gutterBottom style={{ wordBreak: \"break-all\" }}>\n                    {information.description}\n                  </Typography>\n                </Grid>\n              </React.Fragment>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Separation />\n\n      <Grid item xs={12}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"secondary\"\n              name=\"saveAddress\"\n              value=\"provisionAccept\"\n              onChange={() => setProvisionAcceptCheck(!provisionAcceptCheck)}\n            />\n          }\n          label=\"SaySome 이용약관을 확인하였고 동의합니다. (필수 사항)\"\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"secondary\"\n              name=\"saveAddress\"\n              value=\"emailReceptionAccept\"\n              onChange={() =>\n                setEmailReceptionAcceptCheck(!emailReceptionAcceptCheck)\n              }\n            />\n          }\n          label=\"SaySome에 관한 업데이트 소식을 이메일로 받겠습니다. (선택 사항)\"\n        />\n      </Grid>\n    </React.Fragment>\n  );\n};\n\n/* styled-components */\n// 이용약관 컴포넌트\nconst Provision = styled.div``;\n\n// 이용약관과 체크박스 사이 공백 컴포넌트\nconst Separation = styled.div`\n  border-top: 1px dashed black;\n  margin-top: 30px;\n  padding-bottom: 30px;\n`;\n\nexport default SignupReviewPage;\n","import React, { useState, useEffect } from \"react\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SignupUserInfoPage from \"./SignupUserInfoPage\";\nimport SignupEmailCheckPage from \"./SignupEmailCheckPage\";\nimport SignupReviewPage from \"./SignupReviewPage\";\n\nimport { Snackbar } from \"@material-ui/core\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\n\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\n// import globalData\nimport { logoColor } from \"../../globalData\";\n\n// import dotenv\nimport dotenv from \"dotenv\";\n\n// import .env\ndotenv.config();\n\n/*\n  이메일 중복체크 API 호출 함수\n  method: POST\n  Error Code : 3, 4\n  Arguments : email\n  Return : Promise<AxiosResponse<string> | any>\n*/\nconst emailDuplicateCheckAxios = async (\n  email: string\n): Promise<AxiosResponse<any> | any> => {\n  // form 생성\n  const form = new FormData();\n  // form에 데이터 추가\n  form.append(\"email\", email);\n\n  try {\n    // 이메일 중복체크 API 호출\n    return await axios.post(\n      `${process.env.REACT_APP_saysome_restful_server}/emailduplicatecheck`,\n      form\n    );\n  } catch (error) {\n    // 로그인 응답 실패 시 \"API Error\" 문자열 반환\n    const apiError = \"API Error\";\n    return apiError;\n  }\n};\n\n/*\n  회원가입 신청 API 호출 함수\n  method: POST\n  Error Code : 3, 4\n  Arguments : email, password, name, food, provisionAccept, emailReceptionAccept\n  Return : Promise<AxiosResponse<string> | any>\n*/\nconst signupApplyAxios = async (\n  email: string,\n  password: string,\n  name: string,\n  food: string,\n  provisionAccept: Boolean,\n  emailReceptionAccept: Boolean\n): Promise<AxiosResponse<any> | any> => {\n  // form 생성\n  const form = new FormData();\n  // form에 데이터 추가\n  form.append(\"email\", email);\n  form.append(\"password\", password);\n  form.append(\"name\", name);\n  form.append(\"food\", food);\n  form.append(\"provisionAccept\", provisionAccept.toString());\n  form.append(\"emailReceptionAccept\", emailReceptionAccept.toString());\n\n  try {\n    // 이메일 중복체크 API 호출\n    return await axios.post(\n      `${process.env.REACT_APP_saysome_restful_server}/signupapply`,\n      form\n    );\n  } catch (error) {\n    // 로그인 응답 실패 시 \"API Error\" 문자열 반환\n    const apiError = \"API Error\";\n    return apiError;\n  }\n};\n\n/*\n  경고창 생성 함수\n  Arguments : void\n  Return : JSX.Element\n*/\nconst Alert: Function = (props: AlertProps): JSX.Element => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\n/* Material-UI useStyle */\nconst useStyles = makeStyles((theme) => ({\n  //appBar 컴포넌트\n  appBar: {\n    position: \"relative\",\n    background: logoColor,\n  },\n  //layout 컴포넌트\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  //paper 컴포넌트\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  //stepper 컴포넌트\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  //buttons 컴포넌트\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  //button 컴포넌트\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\n/***************************************************************************************\n                              SignupControlPage 컴포넌트\n                              Arguments : void\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.05.23\n***************************************************************************************/\nconst SignupControlPage: React.FC = () => {\n  // useStyle Call\n  const classes = useStyles();\n\n  // 회원가입 단계 hooks ( 변수 : activeStep, 함수 : setActiveStep )\n  const [activeStep, setActiveStep]: [number, Function] = useState<number>(0);\n\n  // 회원가입 이름 hooks ( 변수 : createName, 함수 : setCreateName )\n  const [createName, setCreateName]: [string, Function] = useState<string>(\"\");\n  // 회원가입 이메일 hooks ( 변수 : createEmail, 함수 : setCreateEmail )\n  const [createEmail, setCreateEmail]: [string, Function] = useState<string>(\n    \"\"\n  );\n  // 회원가입 이메일 중복체크 hooks ( 변수 : createEmailDuplicateCheck, 함수 : setCreateEmailDuplicateCheck )\n  const [createEmailDuplicateCheck, setCreateEmailDuplicateCheck]: [\n    boolean,\n    Function\n  ] = useState<boolean>(false);\n  // 회원가입 이메일 중복체크 문구 hooks ( 변수 : createEmailDuplicateCheckSentence, 함수 : setCreateEmailDuplicateCheckSentence )\n  const [\n    createEmailDuplicateCheckSentence,\n    setCreateEmailDuplicateCheckSentence,\n  ]: [string, Function] = useState<string>(\"\");\n  // 회원가입 비밀번호1 hooks ( 변수 : createPassword1, 함수 : setCreatePassword1 )\n  const [createPassword1, setCreatePassword1]: [string, Function] = useState<\n    string\n  >(\"\");\n  // 회원가입 비밀번호2 hooks ( 변수 : createPassword2, 함수 : setCreatePassword2 )\n  const [createPassword2, setCreatePassword2]: [string, Function] = useState<\n    string\n  >(\"\");\n  // 회원가입 좋아하는 음식 hooks ( 변수 : createFavoriteFood, 함수 : setCreateFavoriteFood )\n  const [createFavoriteFood, setCreateFavoriteFood]: [\n    string,\n    Function\n  ] = useState<string>(\"\");\n\n  // 이메일 인증코드 hooks ( 변수 : activeStep, 함수 : setActiveStep )\n  const [authEmailCode, setAuthEmailCode]: [string, Function] = useState<\n    string\n  >(\"\");\n\n  // 이용약관 동의 체크 hooks ( 변수 : provisionAcceptCheck, 함수 : setProvisionAcceptCheck )\n  const [provisionAcceptCheck, setProvisionAcceptCheck]: [\n    boolean,\n    Function\n  ] = useState<boolean>(false);\n  // 이메일 수신 동의 체크 hooks ( 변수 : emailReceptionAcceptCheck, 함수 : setEmailReceptionAcceptCheck )\n  const [emailReceptionAcceptCheck, setEmailReceptionAcceptCheck]: [\n    boolean,\n    Function\n  ] = useState<boolean>(false);\n\n  // 경고창 생성 hooks ( 변수 : error, 함수 : setError )\n  const [error, setError]: [boolean, Function] = useState<boolean>(false);\n  // 경고창 메시지 hooks ( 변수 : errorMessage, 함수 : setErrorMessage )\n  const [errorMessage, setErrorMessage]: [string, Function] = useState<string>(\n    \"\"\n  );\n  // 이메일 중복체크 응답 실패 경고창 생성 hooks ( 변수 : warning, 함수 : setWarning )\n  const [warning, setWarning]: [boolean, Function] = useState<boolean>(false);\n  // 이메일 중복체크 에러코드 hooks ( 변수 : warningCode, 함수 : setWarningCode )\n  const [warningCode, setWarningCode]: [string, Function] = useState<string>(\n    \"\"\n  );\n\n  /*\n    이메일 중복체크 함수\n    Arguments : createEmail\n    Return : Promise<void>\n  */\n  const emailDuplicateCheckRequest: Function = async (): Promise<void> => {\n    // 이메일에 @ 혹은 . 이 없을 경우 경고창 생성\n    if (createEmail.indexOf(\"@\") === -1 || createEmail.indexOf(\".\") === -1) {\n      setCreateEmailDuplicateCheck(false);\n      setCreateEmailDuplicateCheckSentence(\n        \"올바르지 않은 이메일 형식입니다! 제대로 입력해 주세요.\"\n      );\n      return;\n    }\n\n    // 이메일 중복체크 API 호출\n    const data = await emailDuplicateCheckAxios(createEmail);\n\n    // 이메일 중복체크 응답 실패 시 경고창 생성\n    // 에러코드 : 3\n    if (data === \"API Error\") {\n      setWarningCode(\"3\");\n      setWarning(true);\n    } else {\n      // 데이터베이스 응답 실패 시 경고창 생성\n      // 에러코드 : 4\n      if (data.data.CheckValue === \"Database Error\") {\n        setWarningCode(\"4\");\n        setWarning(true);\n      }\n      // 이메일 사용 가능한 경우\n      else if (data.data.CheckValue === \"OK\") {\n        setCreateEmailDuplicateCheck(true);\n        setCreateEmailDuplicateCheckSentence(\"사용 가능한 이메일 입니다!\");\n      } else {\n        // 이메일이 중복된 경우\n        setCreateEmailDuplicateCheck(false);\n        setCreateEmailDuplicateCheckSentence(\n          \"중복된 이메일 입니다! 다른 이메일을 사용해주세요.\"\n        );\n      }\n    }\n  };\n\n  /*\n    회원가입 신청 함수\n    Arguments : createEmail, createPassword1, createName, createFavoriteFood, provisionAcceptCheck,emailReceptionAcceptCheck\n    Return : Promise<void>\n  */\n  const signupApplyRequest: Function = async (): Promise<void | string> => {\n    // 이메일 중복체크 API 호출\n    const data = await signupApplyAxios(\n      createEmail,\n      createPassword1,\n      createName,\n      createFavoriteFood,\n      provisionAcceptCheck,\n      emailReceptionAcceptCheck\n    );\n\n    // 회원가입 신청 응답 실패 시 경고창 생성\n    // 에러코드 : 5\n    if (data === \"API Error\") {\n      setWarningCode(\"5\");\n      setWarning(true);\n    } else {\n      // 데이터베이스 응답 실패 시 경고창 생성\n      // 에러코드 : 6\n      if (data.data.CheckValue === \"Database Error\") {\n        setWarningCode(\"6\");\n        setWarning(true);\n      }\n      // 데이터베이스에 쿼리 수행은 됬는데 결과 에러 발생 시 경고창 생성\n      // 에러코드 : 7\n      else if (data.data.CheckValue === \"Database Error2\") {\n        setWarningCode(\"7\");\n        setWarning(true);\n      }\n      // 이메일 사용 가능한 경우\n      else {\n        return \"OK\";\n      }\n    }\n  };\n\n  /*\n    경고창 끄기 버튼 클릭 함수\n    Arguments : void\n    Return : void\n    ( 자동 사라짐 기능 의존 함수 )\n  */\n  const handleClose: any = (\n    event?: React.SyntheticEvent,\n    reason?: string\n  ): void => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setError(false);\n    setWarning(false);\n  };\n\n  // 회원가입 단계 표시 리스트\n  const steps: Array<string> = [\n    \"회원정보 입력\",\n    \"이메일 인증\",\n    \"회원가입 신청\",\n  ];\n\n  /*\n    회원가입 단계 조절 함수\n    Arguments : step\n    Return : FunctionComponent | Error\n    ( Error : 스텝 페이지 초과 에러 )\n  */\n  const getStepContent: Function = (step: number): any => {\n    switch (step) {\n      // 회원정보 입력 단계\n      case 0:\n        return (\n          <SignupUserInfoPage\n            createName={createName}\n            createEmail={createEmail}\n            createEmailDuplicateCheck={createEmailDuplicateCheck}\n            createEmailDuplicateCheckSentence={\n              createEmailDuplicateCheckSentence\n            }\n            createPassword1={createPassword1}\n            createPassword2={createPassword2}\n            createFavoriteFood={createFavoriteFood}\n            setCreateName={setCreateName}\n            setCreateEmail={setCreateEmail}\n            setCreatePassword1={setCreatePassword1}\n            setCreatePassword2={setCreatePassword2}\n            setCreateFavoriteFood={setCreateFavoriteFood}\n            emailDuplicateCheckRequest={emailDuplicateCheckRequest}\n          />\n        );\n      // 이메일 인증 단계\n      case 1:\n        return (\n          <SignupEmailCheckPage\n            createEmail={createEmail}\n            authEmailCode={authEmailCode}\n            setAuthEmailCode={setAuthEmailCode}\n          />\n        );\n      // 회원가입 신청 단계\n      case 2:\n        return (\n          <SignupReviewPage\n            createName={createName}\n            createEmail={createEmail}\n            createPassword1={createPassword1}\n            createFavoriteFood={createFavoriteFood}\n            provisionAcceptCheck={provisionAcceptCheck}\n            setProvisionAcceptCheck={setProvisionAcceptCheck}\n            emailReceptionAcceptCheck={emailReceptionAcceptCheck}\n            setEmailReceptionAcceptCheck={setEmailReceptionAcceptCheck}\n          />\n        );\n      // 스텝 에러\n      default:\n        throw new Error(\"스텝 에러!\");\n    }\n  };\n\n  /*\n    다음으로 버튼 처리 함수\n    Arguments : void\n    Return : void\n  */\n  const handleStepNext: any = async (): Promise<void> => {\n    // 회원정보 입력 단계\n    if (activeStep === 0) {\n      // 회원정보 미 기입 시 경고창 생성\n      if (\n        createName === \"\" ||\n        createEmail === \"\" ||\n        createPassword1 === \"\" ||\n        createPassword2 === \"\" ||\n        createFavoriteFood === \"\"\n      ) {\n        setErrorMessage(\"회원정보 기입을 전부 해주셔야 합니다!\");\n        setError(true);\n        return;\n      }\n\n      // 작성한 비밀번호가 불일치 시 경고창 생성\n      if (createPassword1 !== createPassword2) {\n        setErrorMessage(\"작성하신 비빌먼호가 일치하지 않습니다!\");\n        setError(true);\n        return;\n      }\n\n      // 이메일 중복체크 안했을 시 경고창 생성\n      if (createEmailDuplicateCheck === false) {\n        setErrorMessage(\"이메일 중복체크를 완료해 주셔야 합니다!\");\n        setError(true);\n        return;\n      }\n    }\n    // 이메일 인증 단계\n    else if (activeStep === 1) {\n      // 이메일 인증 코드가 유효하지 않을 시 경고창 생성\n      if (authEmailCode !== \"1234\") {\n        setErrorMessage(\"인증코드가 유효하지 않습니다!\");\n        setError(true);\n        return;\n      }\n    }\n    // 회원가입 신청 단계\n    else if (activeStep === 2) {\n      // 이용약관 체크 안했을 시 경고창 생성\n      if (provisionAcceptCheck === false) {\n        setErrorMessage(\"필수 사항은 반드시 체크하셔야 합니다!\");\n        setError(true);\n        return;\n      }\n\n      // 데이터베이스에 회원정보 기록 실패 시 다음 화면으로 이동 막음\n      if ((await signupApplyRequest()) !== \"OK\") {\n        return;\n      }\n    }\n\n    // 위의 모든 조건들 통과 시 다음 단계 진행\n    setActiveStep(activeStep + 1);\n  };\n\n  /*\n    이전으로 버튼 처리 함수\n    Arguments : void\n    Return : void\n  */\n  const handleStepBack: any = (): void => {\n    setActiveStep(activeStep - 1);\n  };\n\n  // history 강제로 가져오기\n  let history: any = useHistory();\n\n  /*\n    로그인 화면으로 버튼 처리 함수\n    Arguments : void\n    Return : void\n  */\n  const goLoginPageClick: any = (): void => {\n    history.push(\"/\");\n  };\n\n  /*\n    카피라이트 함수\n    Arguments : void\n    Return : JSX.Element\n  */\n  const Copyright: Function = (): JSX.Element => {\n    return (\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {\"Copyright © HelloMinchan \"}\n        {new Date().getFullYear()}\n        {\".\"}\n      </Typography>\n    );\n  };\n\n  /***************/\n  /* 생명주기 관리 */\n  /***************/\n  useEffect(() => {\n    // 회원 가입 중 돌아갈 시 실수 방지 확인\n    if (activeStep < 3) {\n      const unblock = history.block(\n        \"\\n정말로 돌아가시겠습니까?\\n작성하신 정보는 저장되지 않습니다.\"\n      );\n      return () => {\n        unblock();\n      };\n    }\n  }, [activeStep, history]);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n\n      <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n        <TitleLogo>{\"SaySome\"}</TitleLogo>\n      </AppBar>\n\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Stepper activeStep={activeStep} className={classes.stepper}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          <React.Fragment>\n            {activeStep === steps.length ? (\n              <React.Fragment>\n                <Typography variant=\"h5\" gutterBottom>\n                  안녕하세요 {createName}님! 가입신청이 완료되었습니다.\n                </Typography>\n                <Typography variant=\"subtitle1\">\n                  아래의 로그인 하러가기 버튼을 눌러 로그인 후 SaySome의 모든\n                  기능을 이용해보세요!\n                </Typography>\n                <SignupFinishLoginButtonPosition>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick={goLoginPageClick}\n                  >\n                    로그인 하러가기\n                  </Button>\n                </SignupFinishLoginButtonPosition>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                {getStepContent(activeStep)}\n\n                <div className={classes.buttons}>\n                  <Button\n                    onClick={goLoginPageClick}\n                    color={\"primary\"}\n                    className={classes.button}\n                  >\n                    로그인 화면으로\n                  </Button>\n                  {activeStep !== 0 && (\n                    <Button onClick={handleStepBack} className={classes.button}>\n                      {\"이전으로\"}\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleStepNext}\n                    className={classes.button}\n                  >\n                    {activeStep === steps.length - 1 ? \"가입신청\" : \"다음으로\"}\n                  </Button>\n                </div>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        </Paper>\n      </main>\n\n      <LoginBottomContainer>\n        {/* 하단 카피라이트 */}\n        <Copyright />\n      </LoginBottomContainer>\n\n      {/* 경고창 */}\n      <Snackbar open={error} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {errorMessage}\n        </Alert>\n      </Snackbar>\n      {/* 로그인 응답 실패 경고창 */}\n      {/* autoHideDuration Props에 null 설정 시 자동 사라짐 비활성화되므로 주의 */}\n      <Snackbar open={warning} autoHideDuration={10000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"warning\">\n          {`에러코드 : ${warningCode}, 고객센터에 문의해 주세요!`}\n        </Alert>\n      </Snackbar>\n    </React.Fragment>\n  );\n};\n\n/* styled-components */\n// 로고 컴포넌트\nconst TitleLogo = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 2vmax;\n  font-family: \"Baloo Tammudu 2\", cursive;\n  font-size: 4vmax;\n  color: white;\n`;\n\n// 회원가입 하단 부 높이 지정 컴포넌트\nconst LoginBottomContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 50px;\n  width: 100%;\n`;\n\n// 회원가입 완료 후 로그인 하러가기 버튼 위치 조절 컴포넌트\nconst SignupFinishLoginButtonPosition = styled.div`\n  display: flex;\n  padding-top: 20px;\n  justify-content: center;\n`;\nexport default SignupControlPage;\n","import React, { useState } from \"react\";\nimport {\n  RouteComponentProps,\n  Route,\n  Switch,\n  HashRouter as Router,\n} from \"react-router-dom\";\n\n// import authentications\nimport AuthRoute from \"./authentications/AuthRoute\";\nimport { UserInfo } from \"./authentications/AuthRequest\";\n\n// import pages\nimport LoginPage from \"./pages/LoginPage\";\nimport MainPage from \"./pages/MainPage\";\nimport ErrorPage from \"./pages/Errorpage\";\nimport SignUpPage from \"./pages/signup_pages/SignupControlPage\";\n\n/***************************************************************************************\n                              SaySome App 컴포넌트\n                              Arguments : void\n                              Return : FunctionComponent\n                              마지막 수정 : 2020.05.23\n***************************************************************************************/\nconst App: React.FC = (): JSX.Element => {\n  // 유저 로그인 상태 hooks ( 변수 : user, 함수 : setUser )\n  const [user, setUser]: [\n    UserInfo | null,\n    Function\n  ] = useState<UserInfo | null>(null);\n\n  // 유저 로그인 상태 변수\n  const authenticated: boolean = user != null;\n\n  /*\n    로그인 요청 함수\n    Arguments : userData\n    Return : void\n  */\n  const login: Function = (userData: UserInfo | null): void =>\n    setUser(userData);\n\n  /*\n    로그아웃 요청 함수\n    Arguments : void\n    Return : void\n  */\n  const logout: Function = (): void => setUser(null);\n\n  return (\n    <Router>\n      <Switch>\n        {/*\n          LoginPage 라우트\n          URL : /login\n          Authentication : All\n        */}\n        <Route\n          path=\"/login\"\n          render={(RouteProps: RouteComponentProps<any>): JSX.Element => (\n            <LoginPage\n              authenticated={authenticated}\n              login={login}\n              {...RouteProps}\n            />\n          )}\n        />\n\n        {/*\n          SignUpPage 라우트\n          URL : /signup\n          Authentication : All\n        */}\n        <Route path=\"/signup\" render={(): JSX.Element => <SignUpPage />} />\n\n        {/*\n          MainPage 라우트\n          URL : /\n          Authentication : True\n        */}\n        <AuthRoute\n          authenticated={authenticated}\n          exact\n          path=\"/\"\n          render={(): JSX.Element => <MainPage user={user} logout={logout} />}\n        />\n\n        {/*\n          ErrorPage 라우트\n          URL : Undefined\n          Authentication : All\n        */}\n        <Route component={ErrorPage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\";\n\n// import dotenv\nimport dotenv from \"dotenv\";\n\n// import .env\ndotenv.config();\n\n// 아폴로 클라이언트 생성\nconst client: any = new ApolloClient({\n  uri: process.env.REACT_APP_saysome_graphql_server,\n});\n\nexport default client;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\n// import apolloClient\nimport client from \"./apolloClient\";\n\nReactDOM.render(\n  // 아폴로 클라이언트 매핑\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}